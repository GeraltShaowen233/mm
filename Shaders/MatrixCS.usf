#include "/Engine/Private/Common.ush"

RWStructuredBuffer<float> featureData;     
RWStructuredBuffer<float> featureVector;
RWStructuredBuffer<float> CostArray;

float Dist(float ax,float ay,float az, float bx,float by,float bz)
{
	return sqrt(pow((bx-ax),2) + pow((by-ay),2) + pow((bz-az),2));
}
float caculateCost(int RowIndex)
{
	float Cost = 0;
	float scale = 0;
	int trueIndex = RowIndex * FMMconst.cols;
	for (int i=0;i<FMMconst.cols;i+=3)
	{
		if(i<FMMconst.cols-12)
		{
			scale = FMMconst.PoseStrength;
		}
		else if(i<FMMconst.cols-9)
		{
			scale = FMMconst.VelocityStrength;
		}
		else
		{
			scale = FMMconst.Responsiveness/3.0f;
		}
		Cost += scale*Dist(featureData[trueIndex+i],featureData[trueIndex +i+1],featureData[trueIndex +i+2],
			featureVector[i],featureVector[i+1],featureVector[i+2]);
	}
	return Cost;
}

[numthreads(10, 1, 1)]
void MainComputeShader(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint GroupIndex : SV_GroupIndex )
{
	int rowIndex = DispatchThreadId.x;
	CostArray[DispatchThreadId.x] = caculateCost(rowIndex);
}